// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xmlParserASP.Presistant;

#nullable disable

namespace xmlParserASP.Migrations
{
    [DbContext(typeof(GammaContext))]
    [Migration("20240207140602_QuantityXlColumn")]
    partial class QuantityXlColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.AttributeDescription", b =>
                {
                    b.Property<int?>("AttributeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("attribute_id");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.ToTable("attribute_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.EfmigrationsHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("migration_id");

                    b.Property<string>("ProductVersion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("product_version");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__EFMigrationsHistory", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.MmProductsManualSetPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateEnd")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateStart")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_start");

                    b.Property<int>("SetInStockPrice")
                        .HasColumnType("int(11)")
                        .HasColumnName("set_in_stock_price");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("sku");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasDatabaseName("ix_mm_products_manual_set_prices_sku");

                    b.ToTable("mm_products_manual_set_prices", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.MmProductsManualSetQuanity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateEnd")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateStart")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_start");

                    b.Property<int>("SetInStockQty")
                        .HasColumnType("int(11)")
                        .HasColumnName("set_in_stock_qty");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("sku");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Sku" }, "ix_products_manual_set_quanitys_sku")
                        .IsUnique()
                        .HasDatabaseName("ix_mm_products_manual_set_quanitys_sku");

                    b.ToTable("mm_products_manual_set_quanitys", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.MmProductsSetQuantityWhenMin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("int")
                        .HasColumnName("min_quantity");

                    b.Property<int>("SetQuantity")
                        .HasColumnType("int")
                        .HasColumnName("set_quantity");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("sku");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasDatabaseName("ix_mm_products_set_quantity_when_min_sku");

                    b.ToTable("mm_products_set_quantity_when_min", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.MmSupplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("supplier_id");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("supplier_name");

                    b.HasKey("SupplierId")
                        .HasName("PRIMARY");

                    b.ToTable("mm_supplier", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.MmSupplierXmlSetting", b =>
                {
                    b.Property<int>("SupplierXmlSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("supplier_xml_setting_id");

                    b.Property<string>("CurrencyNode")
                        .HasColumnType("longtext")
                        .HasColumnName("currency_node");

                    b.Property<string>("DescriptionNode")
                        .HasColumnType("longtext")
                        .HasColumnName("description_node");

                    b.Property<string>("MainProductNode")
                        .HasColumnType("longtext")
                        .HasColumnName("main_product_node");

                    b.Property<string>("ModelNode")
                        .HasColumnType("longtext")
                        .HasColumnName("model_node");

                    b.Property<string>("ModelXlColumn")
                        .HasColumnType("longtext")
                        .HasColumnName("model_xl_column");

                    b.Property<string>("NameNode")
                        .HasColumnType("longtext")
                        .HasColumnName("name_node");

                    b.Property<string>("ParamAttrNode")
                        .HasColumnType("longtext")
                        .HasColumnName("param_attr_node");

                    b.Property<string>("ParamAttribute")
                        .HasColumnType("longtext")
                        .HasColumnName("param_attribute");

                    b.Property<string>("ParamNode")
                        .HasColumnType("longtext")
                        .HasColumnName("param_node");

                    b.Property<string>("Path")
                        .HasColumnType("longtext")
                        .HasColumnName("path");

                    b.Property<string>("PhotoFolder")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_folder");

                    b.Property<string>("PictureNode")
                        .HasColumnType("longtext")
                        .HasColumnName("picture_node");

                    b.Property<string>("PriceNode")
                        .HasColumnType("longtext")
                        .HasColumnName("price_node");

                    b.Property<string>("PricePictureXlColumn")
                        .HasColumnType("longtext")
                        .HasColumnName("picture_price_quantity_xl_column");

                    b.Property<string>("ProductNode")
                        .HasColumnType("longtext")
                        .HasColumnName("product_node");

                    b.Property<string>("QtyInBoxColumnNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("qty_in_box_column_number");

                    b.Property<string>("QuantityDbStock1")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("quantity_db_stock1");

                    b.Property<string>("QuantityDbStock2")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("quantity_db_stock2");

                    b.Property<string>("QuantityDbStock3")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("quantity_db_stock3");

                    b.Property<string>("QuantityDbStock4")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("quantity_db_stock4");

                    b.Property<string>("QuantityDbStock5")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("quantity_db_stock5");

                    b.Property<string>("QuantityDbStock6")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("quantity_db_stock6");

                    b.Property<string>("QuantityDbStock7")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("quantity_db_stock7");

                    b.Property<string>("QuantityDbStock8")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("quantity_db_stock8");

                    b.Property<string>("QuantityDbStock9")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("quantity_db_stock9");

                    b.Property<string>("QuantityLongTermNode")
                        .HasColumnType("longtext")
                        .HasColumnName("quantity_long_term_node");

                    b.Property<string>("QuantityNode")
                        .HasColumnType("longtext")
                        .HasColumnName("quantity_node");

                    b.Property<string>("QuantityXlColumn")
                        .HasColumnType("longtext")
                        .HasColumnName("quantity_xl_column");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("setting_name");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int(11)")
                        .HasColumnName("supplier_id");

                    b.Property<string>("SupplierNode")
                        .HasColumnType("longtext")
                        .HasColumnName("supplier_node");

                    b.HasKey("SupplierXmlSettingId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SupplierId" }, "ix_mm_supplier_xml_settings_supplier_id")
                        .HasDatabaseName("ix_mm_supplier_xml_settings_supplier_id");

                    b.ToTable("mm_supplier_xml_settings", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("address_id");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("address_1");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("address_2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("city");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("company");

                    b.Property<int>("CountryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("country_id");

                    b.Property<string>("CustomField")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("custom_field");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("lastname");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("postcode");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int(11)")
                        .HasColumnName("zone_id");

                    b.HasKey("AddressId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "customer_id")
                        .HasDatabaseName("ix_ng_address_customer_id");

                    b.ToTable("ng_address", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgAddressSimpleField", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("address_id");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.HasKey("AddressId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_address_simple_fields", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgApi", b =>
                {
                    b.Property<int>("ApiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("api_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("username");

                    b.HasKey("ApiId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_api", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgApiIp", b =>
                {
                    b.Property<int>("ApiIpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("api_ip_id");

                    b.Property<int>("ApiId")
                        .HasColumnType("int(11)")
                        .HasColumnName("api_id");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.HasKey("ApiIpId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_api_ip", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgApiSession", b =>
                {
                    b.Property<int>("ApiSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("api_session_id");

                    b.Property<int>("ApiId")
                        .HasColumnType("int(11)")
                        .HasColumnName("api_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("session_id");

                    b.HasKey("ApiSessionId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_api_session", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<bool>("ArticleReview")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("article_review");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_added")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("DateAvailable")
                        .HasColumnType("date")
                        .HasColumnName("date_available");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int>("Gstatus")
                        .HasColumnType("int(11)")
                        .HasColumnName("gstatus");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<bool?>("Noindex")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("noindex")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("sort_order");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<int>("Viewed")
                        .HasColumnType("int(5)")
                        .HasColumnName("viewed");

                    b.HasKey("ArticleId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_article", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticleDescription", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaH1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_h1");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.HasKey("ArticleId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("ix_ng_article_description_name");

                    b.ToTable("ng_article_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticleImage", b =>
                {
                    b.Property<int>("ArticleImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("article_image_id");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("ArticleImageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_article_image", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticleRelated", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<int>("RelatedId")
                        .HasColumnType("int(11)")
                        .HasColumnName("related_id");

                    b.HasKey("ArticleId", "RelatedId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_article_related", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticleRelatedMn", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("manufacturer_id");

                    b.HasKey("ArticleId", "ManufacturerId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_article_related_mn", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticleRelatedProduct", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.HasKey("ArticleId", "ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_article_related_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticleRelatedWb", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.HasKey("ArticleId", "CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_article_related_wb", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticleToBlogCategory", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("blog_category_id");

                    b.Property<bool>("MainBlogCategory")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("main_blog_category");

                    b.HasKey("ArticleId", "BlogCategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_article_to_blog_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticleToDownload", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<int>("DownloadId")
                        .HasColumnType("int(11)")
                        .HasColumnName("download_id");

                    b.HasKey("ArticleId", "DownloadId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_article_to_download", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticleToLayout", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_id");

                    b.HasKey("ArticleId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_article_to_layout", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgArticleToStore", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("ArticleId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_article_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgAttribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("attribute_id");

                    b.Property<int>("AttributeGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("attribute_group_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("AttributeId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_attribute", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgAttributeDescription", b =>
                {
                    b.Property<int>("AttributeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("attribute_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("AttributeId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_attribute_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgAttributeGroup", b =>
                {
                    b.Property<int>("AttributeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("attribute_group_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("AttributeGroupId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_attribute_group", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgAttributeGroupDescription", b =>
                {
                    b.Property<int>("AttributeGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("attribute_group_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("AttributeGroupId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_attribute_group_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgBanner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("banner_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.HasKey("BannerId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_banner", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgBannerImage", b =>
                {
                    b.Property<int>("BannerImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("banner_image_id");

                    b.Property<int>("BannerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("banner_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("link");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.HasKey("BannerImageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_banner_image", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgBlogCategory", b =>
                {
                    b.Property<int>("BlogCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("blog_category_id");

                    b.Property<int>("Column")
                        .HasColumnType("int(3)")
                        .HasColumnName("column");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_added")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<bool?>("Noindex")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("noindex")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("ParentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("parent_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<bool>("Top")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("top");

                    b.HasKey("BlogCategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_blog_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgBlogCategoryDescription", b =>
                {
                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("blog_category_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaH1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_h1");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.HasKey("BlogCategoryId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("ix_ng_blog_category_description_name");

                    b.ToTable("ng_blog_category_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgBlogCategoryPath", b =>
                {
                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("blog_category_id");

                    b.Property<int>("PathId")
                        .HasColumnType("int(11)")
                        .HasColumnName("path_id");

                    b.Property<int>("Level")
                        .HasColumnType("int(11)")
                        .HasColumnName("level");

                    b.HasKey("BlogCategoryId", "PathId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_blog_category_path", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgBlogCategoryToLayout", b =>
                {
                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("blog_category_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_id");

                    b.HasKey("BlogCategoryId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_blog_category_to_layout", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgBlogCategoryToStore", b =>
                {
                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("blog_category_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("BlogCategoryId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_blog_category_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCart", b =>
                {
                    b.Property<uint>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("cart_id");

                    b.Property<int>("ApiId")
                        .HasColumnType("int(11)")
                        .HasColumnName("api_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("option");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(5)")
                        .HasColumnName("quantity");

                    b.Property<int>("RecurringId")
                        .HasColumnType("int(11)")
                        .HasColumnName("recurring_id");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("session_id");

                    b.HasKey("CartId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ApiId", "CustomerId", "SessionId", "ProductId", "RecurringId" }, "cart_id")
                        .HasDatabaseName("ix_ng_cart_api_id_customer_id_session_id_product_id_recurring_id");

                    b.ToTable("ng_cart", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("Column")
                        .HasColumnType("int(3)")
                        .HasColumnName("column");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<bool?>("Noindex")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("noindex")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("ParentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("parent_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<bool>("Top")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("top");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParentId" }, "parent_id")
                        .HasDatabaseName("ix_ng_category_parent_id");

                    b.ToTable("ng_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCategoryDescription", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaH1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_h1");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("ix_ng_category_description_name");

                    b.ToTable("ng_category_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCategoryFilter", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("FilterId")
                        .HasColumnType("int(11)")
                        .HasColumnName("filter_id");

                    b.HasKey("CategoryId", "FilterId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_category_filter", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCategoryPath", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("PathId")
                        .HasColumnType("int(11)")
                        .HasColumnName("path_id");

                    b.Property<int>("Level")
                        .HasColumnType("int(11)")
                        .HasColumnName("level");

                    b.HasKey("CategoryId", "PathId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_category_path", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCategoryToLayout", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_id");

                    b.HasKey("CategoryId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_category_to_layout", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCategoryToPromCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("PromCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("prom_category_id");

                    b.HasKey("CategoryId", "PromCategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PromCategoryId" }, "prom_category_id")
                        .HasDatabaseName("ix_ng_category_to_prom_category_prom_category_id");

                    b.ToTable("ng_category_to_prom_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCategoryToStore", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("CategoryId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_category_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("country_id");

                    b.Property<string>("AddressFormat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_format");

                    b.Property<string>("IsoCode2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("iso_code_2");

                    b.Property<string>("IsoCode3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("iso_code_3");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<bool>("PostcodeRequired")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("postcode_required");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("CountryId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_country", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCoupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("coupon_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_end")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<DateTime>("DateStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_start")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<decimal>("Discount")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("discount");

                    b.Property<bool>("Logged")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("logged");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<bool>("Shipping")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("shipping");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("total");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("type")
                        .IsFixedLength();

                    b.Property<string>("UsesCustomer")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("uses_customer");

                    b.Property<int>("UsesTotal")
                        .HasColumnType("int(11)")
                        .HasColumnName("uses_total");

                    b.HasKey("CouponId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_coupon", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCouponCategory", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnType("int(11)")
                        .HasColumnName("coupon_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.HasKey("CouponId", "CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_coupon_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCouponHistory", b =>
                {
                    b.Property<int>("CouponHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("coupon_history_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("amount");

                    b.Property<int>("CouponId")
                        .HasColumnType("int(11)")
                        .HasColumnName("coupon_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.HasKey("CouponHistoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_coupon_history", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCouponProduct", b =>
                {
                    b.Property<int>("CouponProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("coupon_product_id");

                    b.Property<int>("CouponId")
                        .HasColumnType("int(11)")
                        .HasColumnName("coupon_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.HasKey("CouponProductId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_coupon_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCurrency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("currency_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("DecimalPlace")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("decimal_place")
                        .IsFixedLength();

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("SymbolLeft")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("symbol_left");

                    b.Property<string>("SymbolRight")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("symbol_right");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("title");

                    b.Property<double>("Value")
                        .HasColumnType("double(15,8)")
                        .HasColumnName("value");

                    b.HasKey("CurrencyId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_currency", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomField", b =>
                {
                    b.Property<int>("CustomFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("custom_field_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("location");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("type");

                    b.Property<string>("Validation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("validation");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("CustomFieldId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_custom_field", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomFieldCustomerGroup", b =>
                {
                    b.Property<int>("CustomFieldId")
                        .HasColumnType("int(11)")
                        .HasColumnName("custom_field_id");

                    b.Property<int>("CustomerGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_group_id");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("required");

                    b.HasKey("CustomFieldId", "CustomerGroupId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_custom_field_customer_group", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomFieldDescription", b =>
                {
                    b.Property<int>("CustomFieldId")
                        .HasColumnType("int(11)")
                        .HasColumnName("custom_field_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.HasKey("CustomFieldId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_custom_field_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomFieldValue", b =>
                {
                    b.Property<int>("CustomFieldValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("custom_field_value_id");

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("int(11)")
                        .HasColumnName("custom_field_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("CustomFieldValueId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_custom_field_value", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomFieldValueDescription", b =>
                {
                    b.Property<int>("CustomFieldValueId")
                        .HasColumnType("int(11)")
                        .HasColumnName("custom_field_value_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("int(11)")
                        .HasColumnName("custom_field_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.HasKey("CustomFieldValueId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_custom_field_value_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<int>("AddressId")
                        .HasColumnType("int(11)")
                        .HasColumnName("address_id");

                    b.Property<string>("Cart")
                        .HasColumnType("text")
                        .HasColumnName("cart");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("code");

                    b.Property<string>("CustomField")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("custom_field");

                    b.Property<int>("CustomerGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_group_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("fax");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("firstname");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("lastname");

                    b.Property<bool>("Newsletter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("newsletter");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("password");

                    b.Property<bool>("Safe")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("safe");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("salt");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<string>("TelegramId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telegram_id");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("telephone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("Wishlist")
                        .HasColumnType("text")
                        .HasColumnName("wishlist");

                    b.HasKey("CustomerId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_customer", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerActivity", b =>
                {
                    b.Property<int>("CustomerActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_activity_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("key");

                    b.HasKey("CustomerActivityId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_customer_activity", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerAffiliate", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("bank_account_name");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankBranchNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("bank_branch_number");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("bank_name");

                    b.Property<string>("BankSwiftCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("bank_swift_code");

                    b.Property<string>("Cheque")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cheque");

                    b.Property<decimal>("Commission")
                        .HasPrecision(4)
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("commission");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("company");

                    b.Property<string>("CustomField")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("custom_field");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Payment")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("payment");

                    b.Property<string>("Paypal")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("paypal");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("Tax")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("tax");

                    b.Property<string>("Tracking")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("tracking");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("website");

                    b.HasKey("CustomerId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_customer_affiliate", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerApproval", b =>
                {
                    b.Property<int>("CustomerApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_approval_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("type");

                    b.HasKey("CustomerApprovalId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_customer_approval", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerGroup", b =>
                {
                    b.Property<int>("CustomerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_group_id");

                    b.Property<int>("Approval")
                        .HasColumnType("int(1)")
                        .HasColumnName("approval");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("CustomerGroupId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerGroupId" }, "customer_group_id")
                        .HasDatabaseName("ix_ng_customer_group_customer_group_id");

                    b.ToTable("ng_customer_group", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerGroupDescription", b =>
                {
                    b.Property<int>("CustomerGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_group_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.HasKey("CustomerGroupId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerGroupId" }, "customer_group_id")
                        .HasDatabaseName("ix_ng_customer_group_description_customer_group_id");

                    b.ToTable("ng_customer_group_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerHistory", b =>
                {
                    b.Property<int>("CustomerHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_history_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.HasKey("CustomerHistoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_customer_history", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerIp", b =>
                {
                    b.Property<int>("CustomerIpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_ip_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.HasKey("CustomerIpId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Ip" }, "ip")
                        .HasDatabaseName("ix_ng_customer_ip_ip");

                    b.ToTable("ng_customer_ip", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerLogin", b =>
                {
                    b.Property<int>("CustomerLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_login_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("email");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.Property<int>("Total")
                        .HasColumnType("int(4)")
                        .HasColumnName("total");

                    b.HasKey("CustomerLoginId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .HasDatabaseName("ix_ng_customer_login_email");

                    b.HasIndex(new[] { "Ip" }, "ip")
                        .HasDatabaseName("ix_ng_customer_login_ip");

                    b.ToTable("ng_customer_login", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerOnline", b =>
                {
                    b.Property<string>("Ip")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Referer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("referer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Ip")
                        .HasName("PRIMARY");

                    b.ToTable("ng_customer_online", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerReward", b =>
                {
                    b.Property<int>("CustomerRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_reward_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<int>("Points")
                        .HasColumnType("int(8)")
                        .HasColumnName("points");

                    b.HasKey("CustomerRewardId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "customer_id")
                        .HasDatabaseName("ix_ng_customer_reward_customer_id");

                    b.HasIndex(new[] { "OrderId" }, "order_id")
                        .HasDatabaseName("ix_ng_customer_reward_order_id");

                    b.ToTable("ng_customer_reward", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerSearch", b =>
                {
                    b.Property<int>("CustomerSearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_search_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<bool>("Description")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("description");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("keyword");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<int>("Products")
                        .HasColumnType("int(11)")
                        .HasColumnName("products");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<bool>("SubCategory")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("sub_category");

                    b.HasKey("CustomerSearchId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_customer_search", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerSimpleField", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.HasKey("CustomerId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_customer_simple_fields", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerTransaction", b =>
                {
                    b.Property<int>("CustomerTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_transaction_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("amount");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.HasKey("CustomerTransactionId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_customer_transaction", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgCustomerWishlist", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.HasKey("CustomerId", "ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_customer_wishlist", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgDownload", b =>
                {
                    b.Property<int>("DownloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("download_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)")
                        .HasColumnName("filename");

                    b.Property<string>("Mask")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("mask");

                    b.HasKey("DownloadId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_download", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgDownloadDescription", b =>
                {
                    b.Property<int>("DownloadId")
                        .HasColumnType("int(11)")
                        .HasColumnName("download_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("DownloadId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_download_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("event_id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("code");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trigger");

                    b.HasKey("EventId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_event", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgExtension", b =>
                {
                    b.Property<int>("ExtensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("extension_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("type");

                    b.HasKey("ExtensionId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_extension", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgExtensionInstall", b =>
                {
                    b.Property<int>("ExtensionInstallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("extension_install_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<int>("ExtensionDownloadId")
                        .HasColumnType("int(11)")
                        .HasColumnName("extension_download_id");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("filename");

                    b.HasKey("ExtensionInstallId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_extension_install", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgExtensionPath", b =>
                {
                    b.Property<int>("ExtensionPathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("extension_path_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<int>("ExtensionInstallId")
                        .HasColumnType("int(11)")
                        .HasColumnName("extension_install_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("path");

                    b.HasKey("ExtensionPathId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_extension_path", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgFilter", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("filter_id");

                    b.Property<int>("FilterGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("filter_group_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("FilterId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_filter", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgFilterDescription", b =>
                {
                    b.Property<int>("FilterId")
                        .HasColumnType("int(11)")
                        .HasColumnName("filter_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<int>("FilterGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("filter_group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("FilterId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_filter_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgFilterGroup", b =>
                {
                    b.Property<int>("FilterGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("filter_group_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("FilterGroupId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_filter_group", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgFilterGroupDescription", b =>
                {
                    b.Property<int>("FilterGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("filter_group_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("FilterGroupId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_filter_group_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgGeoZone", b =>
                {
                    b.Property<int>("GeoZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("geo_zone_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.HasKey("GeoZoneId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_geo_zone", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgGoogleshoppingCategory", b =>
                {
                    b.Property<string>("GoogleProductCategory")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("google_product_category");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.HasKey("GoogleProductCategory", "StoreId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId", "StoreId" }, "category_id_store_id")
                        .HasDatabaseName("ix_ng_googleshopping_category_category_id_store_id");

                    b.ToTable("ng_googleshopping_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgGoogleshoppingProduct", b =>
                {
                    b.Property<uint>("ProductAdvertiseGoogleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("product_advertise_google_id");

                    b.Property<bool?>("Adult")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adult");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("enum('newborn','infant','toddler','kids','adult')")
                        .HasColumnName("age_group");

                    b.Property<int>("Clicks")
                        .HasColumnType("int(11)")
                        .HasColumnName("clicks");

                    b.Property<int?>("Color")
                        .HasColumnType("int(11)")
                        .HasColumnName("color");

                    b.Property<string>("Condition")
                        .HasColumnType("enum('new','refurbished','used')")
                        .HasColumnName("condition");

                    b.Property<decimal>("ConversionValue")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("conversion_value");

                    b.Property<int>("Conversions")
                        .HasColumnType("int(11)")
                        .HasColumnName("conversions");

                    b.Property<decimal>("Cost")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("cost");

                    b.Property<string>("DestinationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('pending','approved','disapproved')")
                        .HasColumnName("destination_status")
                        .HasDefaultValueSql("'pending'");

                    b.Property<string>("Gender")
                        .HasColumnType("enum('male','female','unisex')")
                        .HasColumnName("gender");

                    b.Property<string>("GoogleProductCategory")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("google_product_category");

                    b.Property<bool?>("HasIssues")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_issues");

                    b.Property<int>("Impressions")
                        .HasColumnType("int(11)")
                        .HasColumnName("impressions");

                    b.Property<bool?>("IsBundle")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_bundle");

                    b.Property<bool>("IsModified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_modified");

                    b.Property<int?>("Multipack")
                        .HasColumnType("int(11)")
                        .HasColumnName("multipack");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int?>("Size")
                        .HasColumnType("int(11)")
                        .HasColumnName("size");

                    b.Property<string>("SizeSystem")
                        .HasColumnType("enum('AU','BR','CN','DE','EU','FR','IT','JP','MEX','UK','US')")
                        .HasColumnName("size_system");

                    b.Property<string>("SizeType")
                        .HasColumnType("enum('regular','petite','plus','big and tall','maternity')")
                        .HasColumnName("size_type");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("ProductAdvertiseGoogleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId", "StoreId" }, "product_id_store_id")
                        .IsUnique()
                        .HasDatabaseName("ix_ng_googleshopping_product_product_id_store_id");

                    b.ToTable("ng_googleshopping_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgGoogleshoppingProductStatus", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<string>("ProductVariationId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("product_variation_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("DataQualityIssues")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_quality_issues");

                    b.Property<string>("DestinationStatuses")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("destination_statuses");

                    b.Property<int>("GoogleExpirationDate")
                        .HasColumnType("int(11)")
                        .HasColumnName("google_expiration_date");

                    b.Property<string>("ItemLevelIssues")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_level_issues");

                    b.HasKey("ProductId", "StoreId", "ProductVariationId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_googleshopping_product_status", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgGoogleshoppingProductTarget", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<uint>("AdvertiseGoogleTargetId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("advertise_google_target_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("ProductId", "AdvertiseGoogleTargetId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_googleshopping_product_target", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgGoogleshoppingTarget", b =>
                {
                    b.Property<uint>("AdvertiseGoogleTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("advertise_google_target_id");

                    b.Property<decimal>("Budget")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("budget");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("campaign_name")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("country")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("date")
                        .HasColumnName("date_added");

                    b.Property<string>("Feeds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("feeds");

                    b.Property<int>("Roas")
                        .HasColumnType("int(11)")
                        .HasColumnName("roas");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('paused','active')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'paused'");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("AdvertiseGoogleTargetId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StoreId" }, "store_id")
                        .HasDatabaseName("ix_ng_googleshopping_target_store_id");

                    b.ToTable("ng_googleshopping_target", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgInformation", b =>
                {
                    b.Property<int>("InformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("information_id");

                    b.Property<int>("Bottom")
                        .HasColumnType("int(1)")
                        .HasColumnName("bottom");

                    b.Property<bool?>("Noindex")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("noindex")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("InformationId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_information", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgInformationDescription", b =>
                {
                    b.Property<int>("InformationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("information_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("description");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaH1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_h1");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.HasKey("InformationId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_information_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgInformationToLayout", b =>
                {
                    b.Property<int>("InformationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("information_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_id");

                    b.HasKey("InformationId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_information_to_layout", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgInformationToStore", b =>
                {
                    b.Property<int>("InformationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("information_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("InformationId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_information_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgLanguage", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("code");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("directory");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("image");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("locale");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.HasKey("LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("ix_ng_language_name");

                    b.ToTable("ng_language", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgLayout", b =>
                {
                    b.Property<int>("LayoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("LayoutId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_layout", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgLayoutModule", b =>
                {
                    b.Property<int>("LayoutModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_module_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("code");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_id");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("position");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("LayoutModuleId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_layout_module", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgLayoutRoute", b =>
                {
                    b.Property<int>("LayoutRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_route_id");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_id");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("route");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("LayoutRouteId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_layout_route", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgLengthClass", b =>
                {
                    b.Property<int>("LengthClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("length_class_id");

                    b.Property<decimal>("Value")
                        .HasPrecision(15, 8)
                        .HasColumnType("decimal(15,8)")
                        .HasColumnName("value");

                    b.HasKey("LengthClassId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_length_class", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgLengthClassDescription", b =>
                {
                    b.Property<int>("LengthClassId")
                        .HasColumnType("int(11)")
                        .HasColumnName("length_class_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("title");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("unit");

                    b.HasKey("LengthClassId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_length_class_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgLicensesKm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("license_key");

                    b.Property<string>("PCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("p_code");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("ng_licenses_km", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("location_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("fax");

                    b.Property<string>("Geocode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("geocode");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.Property<string>("Open")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("open");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("telephone");

                    b.HasKey("LocationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("ix_ng_location_name");

                    b.ToTable("ng_location", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgManufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<bool?>("Noindex")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("noindex")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("ManufacturerId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_manufacturer", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgManufacturerDescription", b =>
                {
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Description3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description3");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaH1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_h1");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_title");

                    b.ToTable("ng_manufacturer_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgManufacturerToLayout", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("manufacturer_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_id");

                    b.HasKey("ManufacturerId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_manufacturer_to_layout", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgManufacturerToStore", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("manufacturer_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("ManufacturerId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_manufacturer_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgMarketing", b =>
                {
                    b.Property<int>("MarketingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("marketing_id");

                    b.Property<int>("Clicks")
                        .HasColumnType("int(5)")
                        .HasColumnName("clicks");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.HasKey("MarketingId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_marketing", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgModification", b =>
                {
                    b.Property<int>("ModificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("modification_id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("author");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<int>("ExtensionInstallId")
                        .HasColumnType("int(11)")
                        .HasColumnName("extension_install_id");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("version");

                    b.Property<string>("Xml")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("xml");

                    b.HasKey("ModificationId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_modification", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgModificationBackup", b =>
                {
                    b.Property<int>("BackupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("backup_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<int>("ModificationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("modification_id");

                    b.Property<string>("Xml")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("xml");

                    b.HasKey("BackupId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_modification_backup", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgModule", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("module_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("Setting")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("setting");

                    b.HasKey("ModuleId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_module", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgMultiXml", b =>
                {
                    b.Property<int>("XmlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("xml_id");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("categories");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Products")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("products");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("settings");

                    b.Property<string>("Suppliers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("suppliers");

                    b.HasKey("XmlId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_multi_xml", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgMultiplicityProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Step")
                        .HasColumnType("int(11)")
                        .HasColumnName("step");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_multiplicity_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgNovaposhtaCity", b =>
                {
                    b.Property<string>("Ref")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ref");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("area");

                    b.Property<string>("AreaDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("area_description");

                    b.Property<string>("AreaDescriptionRu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("area_description_ru");

                    b.Property<int>("CityId")
                        .HasColumnType("int(11)")
                        .HasColumnName("CityID");

                    b.Property<bool>("Delivery1")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("delivery1");

                    b.Property<bool>("Delivery2")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("delivery2");

                    b.Property<bool>("Delivery3")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("delivery3");

                    b.Property<bool>("Delivery4")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("delivery4");

                    b.Property<bool>("Delivery5")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("delivery5");

                    b.Property<bool>("Delivery6")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("delivery6");

                    b.Property<bool>("Delivery7")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("delivery7");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionRu")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description_ru");

                    b.Property<bool>("IsBranch")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_branch");

                    b.Property<string>("PreventEntryNewStreetsUser")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prevent_entry_new_streets_user");

                    b.Property<string>("SettlementType")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("settlement_type");

                    b.Property<string>("SettlementTypeDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("settlement_type_description");

                    b.Property<string>("SettlementTypeDescriptionRu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("settlement_type_description_ru");

                    b.Property<bool>("SpecialCashCheck")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("special_cash_check");

                    b.HasKey("Ref")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Area" }, "Area")
                        .HasDatabaseName("ix_ng_novaposhta_cities_area");

                    b.ToTable("ng_novaposhta_cities", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgNovaposhtaDepartment", b =>
                {
                    b.Property<string>("Ref")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ref");

                    b.Property<bool>("BicycleParking")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bicycle_parking");

                    b.Property<string>("CategoryOfWarehouse")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("category_of_warehouse");

                    b.Property<string>("CityDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("city_description");

                    b.Property<string>("CityDescriptionRu")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("city_description_ru");

                    b.Property<string>("CityRef")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("city_ref");

                    b.Property<string>("DeliveryFriday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Delivery_friday");

                    b.Property<string>("DeliveryMonday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Delivery_monday");

                    b.Property<string>("DeliverySaturday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Delivery_saturday");

                    b.Property<string>("DeliverySunday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Delivery_sunday");

                    b.Property<string>("DeliveryThursday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Delivery_thursday");

                    b.Property<string>("DeliveryTuesday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Delivery_tuesday");

                    b.Property<string>("DeliveryWednesday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Delivery_wednesday");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionRu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description_ru");

                    b.Property<string>("Direct")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("direct");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("district_code");

                    b.Property<bool>("InternationalShipping")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("international_shipping");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<int>("Number")
                        .HasColumnType("int(11)")
                        .HasColumnName("number");

                    b.Property<bool>("PaymentAccess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("payment_access");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<int>("PlaceMaxWeightAllowed")
                        .HasColumnType("int(11)")
                        .HasColumnName("place_max_weight_allowed");

                    b.Property<bool>("PostFinance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("post_finance");

                    b.Property<bool>("Posterminal")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("POSTerminal");

                    b.Property<int>("ReceivingLimitationsOnDimensionsHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("ReceivingLimitationsOnDimensions_height");

                    b.Property<int>("ReceivingLimitationsOnDimensionsLength")
                        .HasColumnType("int(11)")
                        .HasColumnName("ReceivingLimitationsOnDimensions_length");

                    b.Property<int>("ReceivingLimitationsOnDimensionsWidth")
                        .HasColumnType("int(11)")
                        .HasColumnName("ReceivingLimitationsOnDimensions_width");

                    b.Property<string>("ReceptionFriday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Reception_friday");

                    b.Property<string>("ReceptionMonday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Reception_monday");

                    b.Property<string>("ReceptionSaturday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Reception_saturday");

                    b.Property<string>("ReceptionSunday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Reception_sunday");

                    b.Property<string>("ReceptionThursday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Reception_thursday");

                    b.Property<string>("ReceptionTuesday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Reception_tuesday");

                    b.Property<string>("ReceptionWednesday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Reception_wednesday");

                    b.Property<string>("RegionCity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("region_city");

                    b.Property<string>("ScheduleFriday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Schedule_friday");

                    b.Property<string>("ScheduleMonday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Schedule_monday");

                    b.Property<string>("ScheduleSaturday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Schedule_saturday");

                    b.Property<string>("ScheduleSunday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Schedule_sunday");

                    b.Property<string>("ScheduleThursday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Schedule_thursday");

                    b.Property<string>("ScheduleTuesday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Schedule_tuesday");

                    b.Property<string>("ScheduleWednesday")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Schedule_wednesday");

                    b.Property<bool>("SelfServiceWorkplacesCount")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("self_service_workplaces_count");

                    b.Property<int>("SendingLimitationsOnDimensionsHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("SendingLimitationsOnDimensions_height");

                    b.Property<int>("SendingLimitationsOnDimensionsLength")
                        .HasColumnType("int(11)")
                        .HasColumnName("SendingLimitationsOnDimensions_length");

                    b.Property<int>("SendingLimitationsOnDimensionsWidth")
                        .HasColumnType("int(11)")
                        .HasColumnName("SendingLimitationsOnDimensions_width");

                    b.Property<string>("SettlementAreaDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("settlement_area_description");

                    b.Property<string>("SettlementDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("settlement_description");

                    b.Property<string>("SettlementRef")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("settlement_ref");

                    b.Property<string>("SettlementRegionsDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("settlement_regions_description");

                    b.Property<string>("SettlementTypeDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("settlement_type_description");

                    b.Property<string>("ShortAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("short_address");

                    b.Property<string>("ShortAddressRu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("short_address_ru");

                    b.Property<int>("SiteKey")
                        .HasColumnType("int(11)")
                        .HasColumnName("site_key");

                    b.Property<int>("TotalMaxWeightAllowed")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_max_weight_allowed");

                    b.Property<string>("TypeOfWarehouse")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("type_of_warehouse");

                    b.Property<string>("WarehouseStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("warehouse_status");

                    b.Property<string>("WarehouseStatusDate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("warehouse_status_date");

                    b.HasKey("Ref")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CityRef" }, "CityRef")
                        .HasDatabaseName("ix_ng_novaposhta_departments_city_ref");

                    b.HasIndex(new[] { "TypeOfWarehouse" }, "TypeOfWarehouse")
                        .HasDatabaseName("ix_ng_novaposhta_departments_type_of_warehouse");

                    b.ToTable("ng_novaposhta_departments", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgNovaposhtaReference", b =>
                {
                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("value");

                    b.HasIndex(new[] { "Type" }, "type")
                        .IsUnique()
                        .HasDatabaseName("ix_ng_novaposhta_references_type");

                    b.ToTable("ng_novaposhta_references", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgNovaposhtaRegion", b =>
                {
                    b.Property<string>("Ref")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ref");

                    b.Property<string>("AreasCenter")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("areas_center");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionRu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description_ru");

                    b.HasKey("Ref")
                        .HasName("PRIMARY");

                    b.ToTable("ng_novaposhta_regions", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterAttributeCache", b =>
                {
                    b.Property<int>("AttributeCacheId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("attribute_cache_id");

                    b.Property<uint>("AttributeId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("attribute_id");

                    b.Property<ulong>("Key")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("key");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("language_id");

                    b.Property<uint>("ProductId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("product_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("AttributeCacheId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AttributeId" }, "attribute_id")
                        .HasDatabaseName("ix_ng_ocfilter_attribute_cache_attribute_id");

                    b.HasIndex(new[] { "Key" }, "key")
                        .HasDatabaseName("ix_ng_ocfilter_attribute_cache_key");

                    b.HasIndex(new[] { "LanguageId" }, "language_id")
                        .HasDatabaseName("ix_ng_ocfilter_attribute_cache_language_id");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("ix_ng_ocfilter_attribute_cache_product_id");

                    b.ToTable("ng_ocfilter_attribute_cache", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterCache", b =>
                {
                    b.Property<ulong>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("key");

                    b.Property<int>("Expire")
                        .HasColumnType("int(11)")
                        .HasColumnName("expire");

                    b.Property<string>("Path")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("path");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Expire" }, "expire")
                        .HasDatabaseName("ix_ng_ocfilter_cache_expire");

                    b.HasIndex(new[] { "Path" }, "path")
                        .HasDatabaseName("ix_ng_ocfilter_cache_path");

                    b.ToTable("ng_ocfilter_cache", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterFilter", b =>
                {
                    b.Property<uint>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("filter_id");

                    b.Property<byte>("Source")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("source");

                    b.Property<bool>("Color")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("color");

                    b.Property<bool>("Dropdown")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("dropdown");

                    b.Property<bool>("Image")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("image");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("sort_order");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("set('checkbox','radio','slide','slide_dual')")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'checkbox'");

                    b.HasKey("FilterId", "Source")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Status" }, "slider_status")
                        .HasDatabaseName("ix_ng_ocfilter_filter_status");

                    b.HasIndex(new[] { "SortOrder" }, "sort_order")
                        .HasDatabaseName("ix_ng_ocfilter_filter_sort_order");

                    b.ToTable("ng_ocfilter_filter", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterFilterDescription", b =>
                {
                    b.Property<uint>("FilterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("filter_id");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("language_id");

                    b.Property<byte>("Source")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("source");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("suffix")
                        .HasDefaultValueSql("''");

                    b.HasKey("FilterId", "LanguageId", "Source")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LanguageId" }, "language_id")
                        .HasDatabaseName("ix_ng_ocfilter_filter_description_language_id");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("ix_ng_ocfilter_filter_description_name");

                    b.ToTable("ng_ocfilter_filter_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterFilterRangeToProduct", b =>
                {
                    b.Property<uint>("FilterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("filter_id");

                    b.Property<byte>("Source")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("source");

                    b.Property<uint>("ProductId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Max")
                        .HasPrecision(15, 3)
                        .HasColumnType("decimal(15,3)")
                        .HasColumnName("max");

                    b.Property<decimal?>("Min")
                        .HasPrecision(15, 3)
                        .HasColumnType("decimal(15,3)")
                        .HasColumnName("min");

                    b.HasKey("FilterId", "Source", "ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Min", "Max" }, "min_max")
                        .HasDatabaseName("ix_ng_ocfilter_filter_range_to_product_min_max");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("ix_ng_ocfilter_filter_range_to_product_product_id");

                    b.ToTable("ng_ocfilter_filter_range_to_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterFilterToCategory", b =>
                {
                    b.Property<uint>("CategoryId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("category_id");

                    b.Property<uint>("FilterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("filter_id");

                    b.Property<byte>("Source")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("source");

                    b.HasKey("CategoryId", "FilterId", "Source")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "category_id")
                        .HasDatabaseName("ix_ng_ocfilter_filter_to_category_category_id");

                    b.ToTable("ng_ocfilter_filter_to_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterFilterToStore", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<uint>("FilterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("filter_id");

                    b.Property<byte>("Source")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("source");

                    b.HasKey("StoreId", "FilterId", "Source")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StoreId" }, "store_id")
                        .HasDatabaseName("ix_ng_ocfilter_filter_to_store_store_id");

                    b.ToTable("ng_ocfilter_filter_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterFilterValue", b =>
                {
                    b.Property<ulong>("ValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("value_id");

                    b.Property<byte>("Source")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("source");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("char(6)")
                        .HasColumnName("color")
                        .HasDefaultValueSql("''")
                        .IsFixedLength();

                    b.Property<uint>("FilterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("filter_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image")
                        .HasDefaultValueSql("''");

                    b.Property<ulong>("Key")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("key");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("sort_order");

                    b.HasKey("ValueId", "Source")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FilterId" }, "option_id")
                        .HasDatabaseName("ix_ng_ocfilter_filter_value_filter_id");

                    b.HasIndex(new[] { "SortOrder" }, "sort_order")
                        .HasDatabaseName("ix_ng_ocfilter_filter_value_sort_order");

                    b.HasIndex(new[] { "Key" }, "translit")
                        .HasDatabaseName("ix_ng_ocfilter_filter_value_key");

                    b.ToTable("ng_ocfilter_filter_value", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterFilterValueDescription", b =>
                {
                    b.Property<ulong>("ValueId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("value_id");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("language_id");

                    b.Property<byte>("Source")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("source");

                    b.Property<string>("AttributeText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("attribute_text");

                    b.Property<uint>("FilterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("filter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.HasKey("ValueId", "LanguageId", "Source")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FilterId" }, "filter_id")
                        .HasDatabaseName("ix_ng_ocfilter_filter_value_description_filter_id");

                    b.HasIndex(new[] { "LanguageId" }, "language_id")
                        .HasDatabaseName("ix_ng_ocfilter_filter_value_description_language_id");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("ix_ng_ocfilter_filter_value_description_name");

                    b.ToTable("ng_ocfilter_filter_value_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterFilterValueToProduct", b =>
                {
                    b.Property<uint>("FilterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("filter_id");

                    b.Property<ulong>("ValueId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("value_id");

                    b.Property<byte>("Source")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("source");

                    b.Property<uint>("ProductId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("product_id");

                    b.HasKey("FilterId", "ValueId", "Source", "ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("ix_ng_ocfilter_filter_value_to_product_product_id");

                    b.ToTable("ng_ocfilter_filter_value_to_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterPage", b =>
                {
                    b.Property<uint>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("page_id");

                    b.Property<bool>("Category")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("category");

                    b.Property<uint>("CategoryId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("category_id");

                    b.Property<bool>("Dynamic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("dynamic");

                    b.Property<uint>("DynamicId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("dynamic_id");

                    b.Property<bool>("Module")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("module");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<byte>("ParamsCount")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("params_count");

                    b.Property<ulong>("ParamsKey")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("params_key");

                    b.Property<bool>("Product")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("product");

                    b.Property<bool>("Sitemap")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("sitemap");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.HasKey("PageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "category_id")
                        .HasDatabaseName("ix_ng_ocfilter_page_category_id");

                    b.HasIndex(new[] { "DynamicId" }, "dynamic_id")
                        .HasDatabaseName("ix_ng_ocfilter_page_dynamic_id");

                    b.HasIndex(new[] { "ParamsCount" }, "params_count")
                        .HasDatabaseName("ix_ng_ocfilter_page_params_count");

                    b.HasIndex(new[] { "ParamsKey" }, "params_key")
                        .HasDatabaseName("ix_ng_ocfilter_page_params_key");

                    b.ToTable("ng_ocfilter_page", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterPageDescription", b =>
                {
                    b.Property<uint>("PageId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("page_id");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("language_id");

                    b.Property<string>("DescriptionBottom")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description_bottom");

                    b.Property<string>("DescriptionTop")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description_top");

                    b.Property<string>("HeadingTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("heading_title");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.HasKey("PageId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LanguageId" }, "language_id")
                        .HasDatabaseName("ix_ng_ocfilter_page_description_language_id");

                    b.ToTable("ng_ocfilter_page_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterPageToLayout", b =>
                {
                    b.Property<uint>("PageId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("page_id");

                    b.Property<uint>("StoreId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("store_id");

                    b.Property<uint>("LayoutId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("layout_id");

                    b.HasKey("PageId", "StoreId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StoreId" }, "store_id")
                        .HasDatabaseName("ix_ng_ocfilter_page_to_layout_store_id");

                    b.ToTable("ng_ocfilter_page_to_layout", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterPageToStore", b =>
                {
                    b.Property<uint>("StoreId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("store_id");

                    b.Property<uint>("PageId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("page_id");

                    b.HasKey("StoreId", "PageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StoreId" }, "store_id")
                        .HasDatabaseName("ix_ng_ocfilter_page_to_store_store_id");

                    b.ToTable("ng_ocfilter_page_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOcfilterSetting", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("key");

                    b.Property<byte>("Serialized")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("serialized");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ocfilter_setting", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproAdminSetting", b =>
                {
                    b.Property<int>("Groupdefault")
                        .HasColumnType("int(11)")
                        .HasColumnName("groupdefault");

                    b.Property<bool>("LogSql")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("log_sql");

                    b.Property<string>("TargetMailTemplate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("target_mail_template");

                    b.Property<string>("TargetSmsTemplate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("target_sms_template");

                    b.Property<string>("TargetTlgrmTemplate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("target_tlgrm_template");

                    b.Property<string>("TlgrmAdminIdes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tlgrm_admin_ides");

                    b.Property<string>("TlgrmBotToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tlgrm_bot_token");

                    b.ToTable("ng_ompro_admin_setting", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproFieldsAdded", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("field");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("table");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_fields_added", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproFieldsSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(1)")
                        .HasColumnName("id");

                    b.Property<string>("OrderAsFields")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("order_as_fields");

                    b.Property<string>("OrderFields")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("order_fields");

                    b.Property<string>("OrderSimpleFields")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("order_simple_fields");

                    b.Property<string>("ProductAsFields")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("product_as_fields");

                    b.Property<string>("ProductFields")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("product_fields");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_fields_setting", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproGroupSetting", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("user_group_id");

                    b.Property<string>("AccessActions")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("access_actions");

                    b.Property<string>("CommentTemplates")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("comment_templates");

                    b.Property<string>("DaysToShip")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("days_to_ship");

                    b.Property<string>("FiltersDefault")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("filters_default");

                    b.Property<string>("GroupTarget")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("group_target");

                    b.Property<string>("OrderFormats")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("order_formats");

                    b.Property<string>("OrderPayments")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("order_payments");

                    b.Property<string>("OrderShippings")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("order_shippings");

                    b.Property<string>("OrderStatuses")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("order_statuses");

                    b.Property<string>("Pages")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pages");

                    b.Property<string>("PaymentsList")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payments_list");

                    b.Property<string>("ProductFormats")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("product_formats");

                    b.Property<string>("SelectOrders")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("select_orders");

                    b.Property<string>("ShippingsList")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shippings_list");

                    b.HasKey("UserGroupId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_group_setting", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplBlock", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("target");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_block", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplComment", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_comment", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplExcelOrder", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_excel_orders", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplExcelOrdersProduct", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_excel_orders_products", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplFilter", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FilterId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("filter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_filter", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplFilterProduct", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FilterId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("filter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_filter_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplHistory", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_history", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplMail", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_mail", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplOption", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_option", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplOrder", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_orders", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplPage", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_pages", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplPageBlock", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("target");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_page_block", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplPrintOrder", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_print_orders", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplPrintOrdersTable", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_print_orders_table", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplPrintProductsTable", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_print_products_table", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplProduct", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplSm", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_sms", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOmproTplTlgrm", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_ompro_tpl_tlgrm", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("option_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("type");

                    b.HasKey("OptionId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_option", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOptionDescription", b =>
                {
                    b.Property<int>("OptionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("option_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.HasKey("OptionId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_option_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOptionValue", b =>
                {
                    b.Property<int>("OptionValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("option_value_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<int>("OptionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("option_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("OptionValueId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_option_value", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOptionValueDescription", b =>
                {
                    b.Property<int>("OptionValueId")
                        .HasColumnType("int(11)")
                        .HasColumnName("option_value_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int>("OptionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("option_id");

                    b.HasKey("OptionValueId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_option_value_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<string>("AcceptLanguage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("accept_language");

                    b.Property<int>("AffiliateId")
                        .HasColumnType("int(11)")
                        .HasColumnName("affiliate_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<decimal>("Commission")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("commission");

                    b.Property<int>("CourierUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("courier_user_id");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency_code");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("currency_id");

                    b.Property<decimal>("CurrencyValue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(15, 8)
                        .HasColumnType("decimal(15,8)")
                        .HasColumnName("currency_value")
                        .HasDefaultValueSql("'1.00000000'");

                    b.Property<string>("CustomField")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("custom_field");

                    b.Property<int>("CustomerGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_group_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("fax");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("firstname");

                    b.Property<string>("ForwardedIp")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("forwarded_ip");

                    b.Property<int>("InvoiceNo")
                        .HasColumnType("int(11)")
                        .HasColumnName("invoice_no");

                    b.Property<string>("InvoicePrefix")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("invoice_prefix");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("lastname");

                    b.Property<int>("ManagerUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("manager_user_id");

                    b.Property<int>("MarketingId")
                        .HasColumnType("int(11)")
                        .HasColumnName("marketing_id");

                    b.Property<string>("NovaposhtaCnNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("novaposhta_cn_number");

                    b.Property<string>("NovaposhtaCnRef")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("novaposhta_cn_ref");

                    b.Property<string>("OrderCustomFile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_custom_file");

                    b.Property<string>("OrderCustomImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_custom_image");

                    b.Property<decimal>("OrderDiscount")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("order_discount");

                    b.Property<string>("OrderPresent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_present");

                    b.Property<decimal>("OrderPresentCost")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("order_present_cost");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_status_id");

                    b.Property<string>("PaymentAddress1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("payment_address_1");

                    b.Property<string>("PaymentAddress2")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("payment_address_2");

                    b.Property<string>("PaymentAddressFormat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_address_format");

                    b.Property<string>("PaymentCity")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("payment_city");

                    b.Property<string>("PaymentCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("payment_code");

                    b.Property<string>("PaymentCompany")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("payment_company");

                    b.Property<string>("PaymentCountry")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("payment_country");

                    b.Property<int>("PaymentCountryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("payment_country_id");

                    b.Property<string>("PaymentCustomField")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_custom_field");

                    b.Property<string>("PaymentFirstname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("payment_firstname");

                    b.Property<string>("PaymentLastname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("payment_lastname");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentPostcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("payment_postcode");

                    b.Property<string>("PaymentStatusId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("payment_status_id");

                    b.Property<string>("PaymentZone")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("payment_zone");

                    b.Property<int>("PaymentZoneId")
                        .HasColumnType("int(11)")
                        .HasColumnName("payment_zone_id");

                    b.Property<string>("ShippingAddress1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("shipping_address_1");

                    b.Property<string>("ShippingAddress2")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("shipping_address_2");

                    b.Property<string>("ShippingAddressFormat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shipping_address_format");

                    b.Property<string>("ShippingCity")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("shipping_city");

                    b.Property<string>("ShippingCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("shipping_code");

                    b.Property<string>("ShippingCompany")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("shipping_company");

                    b.Property<decimal>("ShippingCostFact")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("shipping_cost_fact");

                    b.Property<string>("ShippingCountry")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("shipping_country");

                    b.Property<int>("ShippingCountryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("shipping_country_id");

                    b.Property<string>("ShippingCustomField")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shipping_custom_field");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("date")
                        .HasColumnName("shipping_date");

                    b.Property<DateTime>("ShippingDatetimeEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("shipping_datetime_end");

                    b.Property<DateTime>("ShippingDatetimeStart")
                        .HasColumnType("datetime")
                        .HasColumnName("shipping_datetime_start");

                    b.Property<string>("ShippingFirstname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("shipping_firstname");

                    b.Property<string>("ShippingLastname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("shipping_lastname");

                    b.Property<float>("ShippingLatitude")
                        .HasColumnType("float(9,6)")
                        .HasColumnName("shipping_latitude");

                    b.Property<float>("ShippingLongitude")
                        .HasColumnType("float(9,6)")
                        .HasColumnName("shipping_longitude");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("shipping_method");

                    b.Property<string>("ShippingPostcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("shipping_postcode");

                    b.Property<string>("ShippingStatusId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("shipping_status_id");

                    b.Property<TimeSpan>("ShippingTimeEnd")
                        .HasColumnType("time")
                        .HasColumnName("shipping_time_end");

                    b.Property<TimeSpan>("ShippingTimeStart")
                        .HasColumnType("time")
                        .HasColumnName("shipping_time_start");

                    b.Property<string>("ShippingZone")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("shipping_zone");

                    b.Property<int>("ShippingZoneId")
                        .HasColumnType("int(11)")
                        .HasColumnName("shipping_zone_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("store_name");

                    b.Property<string>("StoreUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("store_url");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("telephone");

                    b.Property<decimal>("Total")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("total");

                    b.Property<string>("TrackNo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("track_no");

                    b.Property<string>("Tracking")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("tracking");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_agent");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourierUserId" }, "courier_user_id")
                        .HasDatabaseName("ix_ng_order_courier_user_id");

                    b.HasIndex(new[] { "CustomerGroupId" }, "customer_group_id")
                        .HasDatabaseName("ix_ng_order_customer_group_id");

                    b.HasIndex(new[] { "CustomerId" }, "customer_id")
                        .HasDatabaseName("ix_ng_order_customer_id");

                    b.HasIndex(new[] { "DateAdded" }, "date_added")
                        .HasDatabaseName("ix_ng_order_date_added");

                    b.HasIndex(new[] { "DateModified" }, "date_modified")
                        .HasDatabaseName("ix_ng_order_date_modified");

                    b.HasIndex(new[] { "ManagerUserId" }, "manager_user_id")
                        .HasDatabaseName("ix_ng_order_manager_user_id");

                    b.HasIndex(new[] { "OrderId" }, "order_id")
                        .HasDatabaseName("ix_ng_order_order_id");

                    b.HasIndex(new[] { "OrderStatusId" }, "order_status_id")
                        .HasDatabaseName("ix_ng_order_order_status_id");

                    b.HasIndex(new[] { "PaymentCode" }, "payment_code")
                        .HasDatabaseName("ix_ng_order_payment_code");

                    b.HasIndex(new[] { "ShippingCode" }, "shipping_code")
                        .HasDatabaseName("ix_ng_order_shipping_code");

                    b.HasIndex(new[] { "Total" }, "total")
                        .HasDatabaseName("ix_ng_order_total");

                    b.ToTable("ng_order", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrderHistory", b =>
                {
                    b.Property<int>("OrderHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_history_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(124)
                        .HasColumnType("varchar(124)")
                        .HasColumnName("file_name");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("log");

                    b.Property<bool>("Notify")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("notify");

                    b.Property<bool>("NotifySms")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("notify_sms");

                    b.Property<bool>("NotifyTlgrm")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("notify_tlgrm");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_status_id");

                    b.Property<string>("PaymentStatusId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("payment_status_id");

                    b.Property<string>("ShippingStatusId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("shipping_status_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("OrderHistoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "order_id")
                        .HasDatabaseName("ix_ng_order_history_order_id");

                    b.HasIndex(new[] { "OrderStatusId" }, "order_status_id")
                        .HasDatabaseName("ix_ng_order_history_order_status_id");

                    b.ToTable("ng_order_history", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrderOption", b =>
                {
                    b.Property<int>("OrderOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_option_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<int>("OrderProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_product_id");

                    b.Property<int>("ProductOptionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_option_id");

                    b.Property<int>("ProductOptionValueId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_option_value_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("OrderOptionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "order_id")
                        .HasDatabaseName("ix_ng_order_option_order_id");

                    b.HasIndex(new[] { "OrderOptionId" }, "order_option_id")
                        .HasDatabaseName("ix_ng_order_option_order_option_id");

                    b.HasIndex(new[] { "OrderProductId" }, "order_product_id")
                        .HasDatabaseName("ix_ng_order_option_order_product_id");

                    b.HasIndex(new[] { "ProductOptionValueId" }, "product_option_value_id")
                        .HasDatabaseName("ix_ng_order_option_product_option_value_id");

                    b.ToTable("ng_order_option", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_product_id");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Purchase")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("purchase");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(4)")
                        .HasColumnName("quantity");

                    b.Property<int>("Reward")
                        .HasColumnType("int(8)")
                        .HasColumnName("reward");

                    b.Property<decimal>("Tax")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("tax");

                    b.Property<decimal>("Total")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("total");

                    b.HasKey("OrderProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "order_id")
                        .HasDatabaseName("ix_ng_order_product_order_id");

                    b.HasIndex(new[] { "OrderProductId" }, "order_product_id")
                        .HasDatabaseName("ix_ng_order_product_order_product_id");

                    b.ToTable("ng_order_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrderRecurring", b =>
                {
                    b.Property<int>("OrderRecurringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_recurring_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_name");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_quantity");

                    b.Property<short>("RecurringCycle")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("recurring_cycle");

                    b.Property<string>("RecurringDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("recurring_description");

                    b.Property<short>("RecurringDuration")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("recurring_duration");

                    b.Property<string>("RecurringFrequency")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("recurring_frequency");

                    b.Property<int>("RecurringId")
                        .HasColumnType("int(11)")
                        .HasColumnName("recurring_id");

                    b.Property<string>("RecurringName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("recurring_name");

                    b.Property<decimal>("RecurringPrice")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("recurring_price");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reference");

                    b.Property<sbyte>("Status")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("status");

                    b.Property<bool>("Trial")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("trial");

                    b.Property<short>("TrialCycle")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("trial_cycle");

                    b.Property<short>("TrialDuration")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("trial_duration");

                    b.Property<string>("TrialFrequency")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("trial_frequency");

                    b.Property<decimal>("TrialPrice")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("trial_price");

                    b.HasKey("OrderRecurringId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_order_recurring", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrderRecurringTransaction", b =>
                {
                    b.Property<int>("OrderRecurringTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_recurring_transaction_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<int>("OrderRecurringId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_recurring_id");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reference");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.HasKey("OrderRecurringTransactionId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_order_recurring_transaction", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrderShipment", b =>
                {
                    b.Property<int>("OrderShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_shipment_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<string>("ShippingCourierId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("shipping_courier_id")
                        .HasDefaultValueSql("''");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tracking_number")
                        .HasDefaultValueSql("''");

                    b.HasKey("OrderShipmentId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_order_shipment", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrderSimpleField", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_order_simple_fields", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_status_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.HasKey("OrderStatusId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderStatusId" }, "order_status_id")
                        .HasDatabaseName("ix_ng_order_status_order_status_id");

                    b.ToTable("ng_order_status", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrderTotal", b =>
                {
                    b.Property<int>("OrderTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("order_total_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<decimal>("Value")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("value");

                    b.HasKey("OrderTotalId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Code" }, "code")
                        .HasDatabaseName("ix_ng_order_total_code");

                    b.HasIndex(new[] { "OrderId" }, "order_id")
                        .HasDatabaseName("ix_ng_order_total_order_id");

                    b.ToTable("ng_order_total", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgOrderVoucher", b =>
                {
                    b.Property<int>("OrderVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_voucher_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("amount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("from_email");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("from_name");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<string>("ToEmail")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("to_email");

                    b.Property<string>("ToName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("to_name");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int(11)")
                        .HasColumnName("voucher_id");

                    b.Property<int>("VoucherThemeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("voucher_theme_id");

                    b.HasKey("OrderVoucherId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_order_voucher", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Cost")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("cost");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_available")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Ean")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ean");

                    b.Property<decimal>("Height")
                        .HasPrecision(15, 8)
                        .HasColumnType("decimal(15,8)")
                        .HasColumnName("height");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("isbn");

                    b.Property<string>("Jan")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("jan");

                    b.Property<decimal>("Length")
                        .HasPrecision(15, 8)
                        .HasColumnType("decimal(15,8)")
                        .HasColumnName("length");

                    b.Property<int>("LengthClassId")
                        .HasColumnType("int(11)")
                        .HasColumnName("length_class_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("location");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("manufacturer_id");

                    b.Property<int>("Minimum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("minimum")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("model");

                    b.Property<string>("Mpn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("mpn");

                    b.Property<bool?>("Noindex")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("noindex")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Points")
                        .HasColumnType("int(8)")
                        .HasColumnName("points");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(4)")
                        .HasColumnName("quantity");

                    b.Property<bool?>("Shipping")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("shipping")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("sku");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("sort_order");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<int>("StockStatusId")
                        .HasColumnType("int(11)")
                        .HasColumnName("stock_status_id");

                    b.Property<bool?>("Subtract")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("subtract")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("TaxClassId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tax_class_id");

                    b.Property<string>("Upc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("upc");

                    b.Property<int>("Viewed")
                        .HasColumnType("int(5)")
                        .HasColumnName("viewed");

                    b.Property<decimal>("Weight")
                        .HasPrecision(15, 8)
                        .HasColumnType("decimal(15,8)")
                        .HasColumnName("weight");

                    b.Property<int>("WeightClassId")
                        .HasColumnType("int(11)")
                        .HasColumnName("weight_class_id");

                    b.Property<decimal>("Width")
                        .HasPrecision(15, 8)
                        .HasColumnType("decimal(15,8)")
                        .HasColumnName("width");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("ix_ng_product_product_id");

                    b.ToTable("ng_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductAttribute", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("attribute_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("ProductId", "AttributeId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_product_attribute", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductDescription", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaH1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_h1");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.HasKey("ProductId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("ix_ng_product_description_name");

                    b.ToTable("ng_product_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductDiscount", b =>
                {
                    b.Property<int>("ProductDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("product_discount_id");

                    b.Property<int>("CustomerGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_group_id");

                    b.Property<DateTime>("DateEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_end")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<DateTime>("DateStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_start")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("price");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(5)")
                        .HasColumnName("priority")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(4)")
                        .HasColumnName("quantity");

                    b.HasKey("ProductDiscountId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("ix_ng_product_discount_product_id");

                    b.ToTable("ng_product_discount", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductFilter", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("FilterId")
                        .HasColumnType("int(11)")
                        .HasColumnName("filter_id");

                    b.HasKey("ProductId", "FilterId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_product_filter", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("product_image_id");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("ProductImageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("ix_ng_product_image_product_id");

                    b.ToTable("ng_product_image", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductOption", b =>
                {
                    b.Property<int>("ProductOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("product_option_id");

                    b.Property<int>("OptionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("option_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("required");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("ProductOptionId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_product_option", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductOptionValue", b =>
                {
                    b.Property<int>("ProductOptionValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("product_option_value_id");

                    b.Property<int>("OptionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("option_id");

                    b.Property<int>("OptionValueId")
                        .HasColumnType("int(11)")
                        .HasColumnName("option_value_id");

                    b.Property<int>("Points")
                        .HasColumnType("int(8)")
                        .HasColumnName("points");

                    b.Property<string>("PointsPrefix")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("points_prefix");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("price");

                    b.Property<string>("PricePrefix")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("price_prefix");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("ProductOptionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_option_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(3)")
                        .HasColumnName("quantity");

                    b.Property<bool>("Subtract")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("subtract");

                    b.Property<decimal>("Weight")
                        .HasPrecision(15, 8)
                        .HasColumnType("decimal(15,8)")
                        .HasColumnName("weight");

                    b.Property<string>("WeightPrefix")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("weight_prefix");

                    b.HasKey("ProductOptionValueId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("ix_ng_product_option_value_product_id");

                    b.HasIndex(new[] { "ProductOptionId" }, "product_option_id")
                        .HasDatabaseName("ix_ng_product_option_value_product_option_id");

                    b.HasIndex(new[] { "ProductOptionValueId" }, "product_option_value_id")
                        .HasDatabaseName("ix_ng_product_option_value_product_option_value_id");

                    b.ToTable("ng_product_option_value", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductRecurring", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("RecurringId")
                        .HasColumnType("int(11)")
                        .HasColumnName("recurring_id");

                    b.Property<int>("CustomerGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_group_id");

                    b.HasKey("ProductId", "RecurringId", "CustomerGroupId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_product_recurring", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductRelated", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("RelatedId")
                        .HasColumnType("int(11)")
                        .HasColumnName("related_id");

                    b.HasKey("ProductId", "RelatedId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_product_related", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductRelatedArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.HasKey("ArticleId", "ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_product_related_article", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductRelatedMn", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("manufacturer_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.ToTable("ng_product_related_mn", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductRelatedWb", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.ToTable("ng_product_related_wb", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductReward", b =>
                {
                    b.Property<int>("ProductRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("product_reward_id");

                    b.Property<int>("CustomerGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_group_id");

                    b.Property<int>("Points")
                        .HasColumnType("int(8)")
                        .HasColumnName("points");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.HasKey("ProductRewardId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_product_reward", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductSpecial", b =>
                {
                    b.Property<int>("ProductSpecialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("product_special_id");

                    b.Property<int>("CustomerGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_group_id");

                    b.Property<DateTime>("DateEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_end")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<DateTime>("DateStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_start")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("price");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(5)")
                        .HasColumnName("priority")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.HasKey("ProductSpecialId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("ix_ng_product_special_product_id");

                    b.ToTable("ng_product_special", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductToCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<bool>("MainCategory")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("main_category");

                    b.HasKey("ProductId", "CategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "category_id")
                        .HasDatabaseName("ix_ng_product_to_category_category_id");

                    b.ToTable("ng_product_to_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductToDownload", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("DownloadId")
                        .HasColumnType("int(11)")
                        .HasColumnName("download_id");

                    b.HasKey("ProductId", "DownloadId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_product_to_download", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductToLayout", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int(11)")
                        .HasColumnName("layout_id");

                    b.HasKey("ProductId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_product_to_layout", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductToPromProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("PromProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("prom_product_id");

                    b.HasKey("ProductId", "PromProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PromProductId" }, "prom_product_id")
                        .HasDatabaseName("ix_ng_product_to_prom_product_prom_product_id");

                    b.ToTable("ng_product_to_prom_product", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductToStore", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("ProductId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_product_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgProductToSupplier", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<string>("SupplierId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("supplier_id");

                    b.HasKey("ProductId", "SupplierId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SupplierId" }, "supplier_id")
                        .HasDatabaseName("ix_ng_product_to_supplier_supplier_id");

                    b.ToTable("ng_product_to_supplier", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgPromCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("ParentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("parent_id");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParentId" }, "parent_id")
                        .HasDatabaseName("ix_ng_prom_category_parent_id");

                    b.ToTable("ng_prom_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgPromId", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<string>("PromId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("prom_id");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_prom_id", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgRecurring", b =>
                {
                    b.Property<int>("RecurringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("recurring_id");

                    b.Property<uint>("Cycle")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("cycle");

                    b.Property<uint>("Duration")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("duration");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("enum('day','week','semi_month','month','year')")
                        .HasColumnName("frequency");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("price");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("sort_order");

                    b.Property<sbyte>("Status")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("status");

                    b.Property<uint>("TrialCycle")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("trial_cycle");

                    b.Property<uint>("TrialDuration")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("trial_duration");

                    b.Property<string>("TrialFrequency")
                        .IsRequired()
                        .HasColumnType("enum('day','week','semi_month','month','year')")
                        .HasColumnName("trial_frequency");

                    b.Property<decimal>("TrialPrice")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("trial_price");

                    b.Property<sbyte>("TrialStatus")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("trial_status");

                    b.HasKey("RecurringId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_recurring", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgRecurringDescription", b =>
                {
                    b.Property<int>("RecurringId")
                        .HasColumnType("int(11)")
                        .HasColumnName("recurring_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("RecurringId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_recurring_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgRemarketingOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Dclid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("dclid");

                    b.Property<DateTime>("Ecommerce")
                        .HasColumnType("datetime")
                        .HasColumnName("ecommerce");

                    b.Property<DateTime>("EcommerceGa4")
                        .HasColumnType("datetime")
                        .HasColumnName("ecommerce_ga4");

                    b.Property<DateTime>("Esputnik")
                        .HasColumnType("datetime")
                        .HasColumnName("esputnik");

                    b.Property<DateTime>("Facebook")
                        .HasColumnType("datetime")
                        .HasColumnName("facebook");

                    b.Property<DateTime>("FacebookLead")
                        .HasColumnType("datetime")
                        .HasColumnName("facebook_lead");

                    b.Property<string>("FbEventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fb_event_id");

                    b.Property<string>("FbLeadEventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fb_lead_event_id");

                    b.Property<string>("Fbc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fbc");

                    b.Property<string>("Fbclid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fbclid");

                    b.Property<string>("Fbp")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fbp");

                    b.Property<string>("Ga4Uuid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ga4_uuid");

                    b.Property<string>("Gclid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("gclid");

                    b.Property<string>("OrderData")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("order_data");

                    b.Property<DateTime>("SuccessPage")
                        .HasColumnType("datetime")
                        .HasColumnName("success_page");

                    b.Property<DateTime>("Telegram")
                        .HasColumnType("datetime")
                        .HasColumnName("telegram");

                    b.Property<DateTime>("Tiktok")
                        .HasColumnType("datetime")
                        .HasColumnName("tiktok");

                    b.Property<string>("TtEventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tt_event_id");

                    b.Property<string>("Ttclid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ttclid");

                    b.Property<string>("UtmCampaign")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("utm_campaign");

                    b.Property<string>("UtmContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("utm_content");

                    b.Property<string>("UtmMedium")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("utm_medium");

                    b.Property<string>("UtmSource")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("utm_source");

                    b.Property<string>("UtmTerm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("utm_term");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("uuid");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_remarketing_orders", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgReturn", b =>
                {
                    b.Property<int>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("return_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("DateOrdered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_ordered")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("lastname");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("model");

                    b.Property<bool>("Opened")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("opened");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(4)")
                        .HasColumnName("quantity");

                    b.Property<int>("ReturnActionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("return_action_id");

                    b.Property<int>("ReturnReasonId")
                        .HasColumnType("int(11)")
                        .HasColumnName("return_reason_id");

                    b.Property<int>("ReturnStatusId")
                        .HasColumnType("int(11)")
                        .HasColumnName("return_status_id");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("telephone");

                    b.HasKey("ReturnId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_return", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgReturnAction", b =>
                {
                    b.Property<int>("ReturnActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("return_action_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("ReturnActionId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_return_action", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgReturnHistory", b =>
                {
                    b.Property<int>("ReturnHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("return_history_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<bool>("Notify")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("notify");

                    b.Property<int>("ReturnId")
                        .HasColumnType("int(11)")
                        .HasColumnName("return_id");

                    b.Property<int>("ReturnStatusId")
                        .HasColumnType("int(11)")
                        .HasColumnName("return_status_id");

                    b.HasKey("ReturnHistoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_return_history", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgReturnReason", b =>
                {
                    b.Property<int>("ReturnReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("return_reason_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.HasKey("ReturnReasonId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_return_reason", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgReturnStatus", b =>
                {
                    b.Property<int>("ReturnStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("return_status_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.HasKey("ReturnStatusId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_return_status", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("review_id");

                    b.Property<string>("AdminReply")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("admin_reply");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("author");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("images");

                    b.Property<string>("Minus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("minus");

                    b.Property<string>("Plus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plus");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int(1)")
                        .HasColumnName("rating");

                    b.Property<bool>("RealBuyer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("real_buyer");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("VotesMinus")
                        .HasColumnType("int(11)")
                        .HasColumnName("votes_minus");

                    b.Property<int>("VotesPlus")
                        .HasColumnType("int(11)")
                        .HasColumnName("votes_plus");

                    b.HasKey("ReviewId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("ix_ng_review_product_id");

                    b.ToTable("ng_review", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgReviewArticle", b =>
                {
                    b.Property<int>("ReviewArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("review_article_id");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("article_id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("author")
                        .HasDefaultValueSql("''");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_added")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int>("Rating")
                        .HasColumnType("int(1)")
                        .HasColumnName("rating");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("ReviewArticleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ArticleId" }, "article_id")
                        .HasDatabaseName("ix_ng_review_article_article_id");

                    b.ToTable("ng_review_article", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgSeoTagsGenerator", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("key");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(2)")
                        .HasColumnName("language_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasIndex(new[] { "CategoryId" }, "category_id")
                        .HasDatabaseName("ix_ng_seo_tags_generator_category_id");

                    b.HasIndex(new[] { "Key" }, "key")
                        .HasDatabaseName("ix_ng_seo_tags_generator_key");

                    b.HasIndex(new[] { "LanguageId" }, "language_id")
                        .HasDatabaseName("ix_ng_seo_tags_generator_language_id");

                    b.ToTable("ng_seo_tags_generator", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgSeoTagsGeneratorCategoryCopy", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("CopyCategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("copy_category_id");

                    b.HasKey("CategoryId", "CopyCategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CopyCategoryId" }, "copy_category_id")
                        .HasDatabaseName("ix_ng_seo_tags_generator_category_copy_copy_category_id");

                    b.ToTable("ng_seo_tags_generator_category_copy", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgSeoTagsGeneratorCategoryDeclension", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(3)")
                        .HasColumnName("language_id");

                    b.Property<string>("CategoryNamePluralGenitive")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name_plural_genitive");

                    b.Property<string>("CategoryNamePluralNominative")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name_plural_nominative");

                    b.Property<string>("CategoryNameSingularGenitive")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name_singular_genitive");

                    b.Property<string>("CategoryNameSingularNominative")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name_singular_nominative");

                    b.HasKey("CategoryId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_seo_tags_generator_category_declension", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgSeoTagsGeneratorCategorySetting", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<string>("Setting")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("setting");

                    b.HasIndex(new[] { "CategoryId" }, "category_id")
                        .IsUnique()
                        .HasDatabaseName("ix_ng_seo_tags_generator_category_setting_category_id");

                    b.ToTable("ng_seo_tags_generator_category_setting", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgSeoTagsGeneratorNotUse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("EssenceId")
                        .HasColumnType("int(1)")
                        .HasColumnName("essence_id");

                    b.HasKey("Id", "EssenceId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_seo_tags_generator_not_use", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgSeoUrl", b =>
                {
                    b.Property<int>("SeoUrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("seo_url_id");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("keyword");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("query");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("SeoUrlId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Keyword" }, "keyword")
                        .HasDatabaseName("ix_ng_seo_url_keyword");

                    b.HasIndex(new[] { "Query" }, "query")
                        .HasDatabaseName("ix_ng_seo_url_query");

                    b.ToTable("ng_seo_url", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("session_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("data");

                    b.Property<DateTime>("Expire")
                        .HasColumnType("datetime")
                        .HasColumnName("expire");

                    b.HasKey("SessionId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_session", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("setting_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("code");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("key");

                    b.Property<bool>("Serialized")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("serialized");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("value");

                    b.HasKey("SettingId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_setting", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgSettingSeolang", b =>
                {
                    b.Property<string>("Codekey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("codekey");

                    b.Property<bool>("Serialized")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("serialized");

                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("setting_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasIndex(new[] { "Codekey" }, "codekey")
                        .HasDatabaseName("ix_ng_setting_seolang_codekey");

                    b.HasIndex(new[] { "SettingId" }, "setting_id")
                        .IsUnique()
                        .HasDatabaseName("ix_ng_setting_seolang_setting_id");

                    b.HasIndex(new[] { "StoreId" }, "store_id")
                        .HasDatabaseName("ix_ng_setting_seolang_store_id");

                    b.ToTable("ng_setting_seolang", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgShippingCourier", b =>
                {
                    b.Property<int>("ShippingCourierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("shipping_courier_id");

                    b.Property<string>("ShippingCourierCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("shipping_courier_code")
                        .HasDefaultValueSql("''");

                    b.Property<string>("ShippingCourierName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("shipping_courier_name")
                        .HasDefaultValueSql("''");

                    b.HasKey("ShippingCourierId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_shipping_courier", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgSimpleCart", b =>
                {
                    b.Property<int>("SimpleCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("simple_cart_id");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Email")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("lastname");

                    b.Property<string>("Products")
                        .HasColumnType("text")
                        .HasColumnName("products");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<string>("Telephone")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("telephone");

                    b.HasKey("SimpleCartId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_simple_cart", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgStatistic", b =>
                {
                    b.Property<int>("StatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("statistics_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("code");

                    b.Property<decimal>("Value")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("value");

                    b.HasKey("StatisticsId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_statistics", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgStockStatus", b =>
                {
                    b.Property<int>("StockStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("stock_status_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.HasKey("StockStatusId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_stock_status", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgStore", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("Ssl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ssl");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgTaxClass", b =>
                {
                    b.Property<int>("TaxClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("tax_class_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("title");

                    b.HasKey("TaxClassId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_tax_class", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgTaxRate", b =>
                {
                    b.Property<int>("TaxRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("tax_rate_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<int>("GeoZoneId")
                        .HasColumnType("int(11)")
                        .HasColumnName("geo_zone_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.Property<decimal>("Rate")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("rate");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("type")
                        .IsFixedLength();

                    b.HasKey("TaxRateId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_tax_rate", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgTaxRateToCustomerGroup", b =>
                {
                    b.Property<int>("TaxRateId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tax_rate_id");

                    b.Property<int>("CustomerGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_group_id");

                    b.HasKey("TaxRateId", "CustomerGroupId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_tax_rate_to_customer_group", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgTaxRule", b =>
                {
                    b.Property<int>("TaxRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("tax_rule_id");

                    b.Property<string>("Based")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("based");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(5)")
                        .HasColumnName("priority")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("TaxClassId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tax_class_id");

                    b.Property<int>("TaxRateId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tax_rate_id");

                    b.HasKey("TaxRuleId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_tax_rule", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgTheme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("theme_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("route");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("theme");

                    b.HasKey("ThemeId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_theme", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgTranslation", b =>
                {
                    b.Property<int>("TranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("translation_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("key");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("route");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("TranslationId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_translation", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniGallery", b =>
                {
                    b.Property<int>("GalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("gallery_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.HasKey("GalleryId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_gallery", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniGalleryDescription", b =>
                {
                    b.Property<int>("GalleryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("gallery_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("GalleryId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_gallery_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniGalleryImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("image_id");

                    b.Property<int>("GalleryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("gallery_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.HasKey("ImageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_gallery_image", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniGalleryImageDescription", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("image_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("link");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("ImageId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_gallery_image_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniGalleryToStore", b =>
                {
                    b.Property<int>("GalleryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("gallery_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("GalleryId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_gallery_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniNewsCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<int>("ParentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("parent_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(3)")
                        .HasColumnName("sort_order");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParentId" }, "parent_id")
                        .HasDatabaseName("ix_ng_uni_news_category_parent_id");

                    b.ToTable("ng_uni_news_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniNewsCategoryDescription", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaH1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_h1");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("ix_ng_uni_news_category_description_name");

                    b.ToTable("ng_uni_news_category_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniNewsCategoryPath", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("PathId")
                        .HasColumnType("int(11)")
                        .HasColumnName("path_id");

                    b.Property<int>("Level")
                        .HasColumnType("int(11)")
                        .HasColumnName("level");

                    b.HasKey("CategoryId", "PathId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_news_category_path", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniNewsCategoryToStore", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("CategoryId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_news_category_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniNewsProductRelated", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnType("int(11)")
                        .HasColumnName("news_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.HasKey("NewsId", "ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_news_product_related", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniNewsStory", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("news_id");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<int>("Viewed")
                        .HasColumnType("int(11)")
                        .HasColumnName("viewed");

                    b.HasKey("NewsId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_news_story", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniNewsStoryDescription", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnType("int(11)")
                        .HasColumnName("news_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaH1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_h1");

                    b.Property<string>("MetaKeyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_keyword");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("NewsId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_news_story_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniNewsStoryToCategory", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnType("int(11)")
                        .HasColumnName("news_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("category_id");

                    b.HasKey("NewsId", "CategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "category_id")
                        .HasDatabaseName("ix_ng_uni_news_story_to_category_category_id");

                    b.ToTable("ng_uni_news_story_to_category", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniNewsStoryToStore", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnType("int(11)")
                        .HasColumnName("news_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.HasKey("NewsId", "StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_news_story_to_store", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("request_id");

                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("admin_comment");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_added")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_modified")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("mail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("phone");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("product_id");

                    b.Property<bool>("RequestList")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("request_list");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("type");

                    b.HasKey("RequestId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_uni_request", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUniSetting", b =>
                {
                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("data");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("store_id");

                    b.ToTable("ng_uni_setting", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUpload", b =>
                {
                    b.Property<int>("UploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("upload_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("filename");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("UploadId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_upload", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("firstname");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("salt");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("TelegramId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telegram_id");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("telephone");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_group_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_user", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgUserGroup", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("user_group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permission");

                    b.HasKey("UserGroupId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_user_group", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgVoucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("voucher_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("amount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("from_email");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("from_name");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("ToEmail")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("to_email");

                    b.Property<string>("ToName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("to_name");

                    b.Property<int>("VoucherThemeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("voucher_theme_id");

                    b.HasKey("VoucherId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_voucher", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgVoucherHistory", b =>
                {
                    b.Property<int>("VoucherHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("voucher_history_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)")
                        .HasColumnName("order_id");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int(11)")
                        .HasColumnName("voucher_id");

                    b.HasKey("VoucherHistoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_voucher_history", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgVoucherTheme", b =>
                {
                    b.Property<int>("VoucherThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("voucher_theme_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.HasKey("VoucherThemeId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_voucher_theme", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgVoucherThemeDescription", b =>
                {
                    b.Property<int>("VoucherThemeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("voucher_theme_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.HasKey("VoucherThemeId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_voucher_theme_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgWeightClass", b =>
                {
                    b.Property<int>("WeightClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("weight_class_id");

                    b.Property<decimal>("Value")
                        .HasPrecision(15, 8)
                        .HasColumnType("decimal(15,8)")
                        .HasColumnName("value");

                    b.HasKey("WeightClassId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_weight_class", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgWeightClassDescription", b =>
                {
                    b.Property<int>("WeightClassId")
                        .HasColumnType("int(11)")
                        .HasColumnName("weight_class_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("language_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("title");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("unit");

                    b.HasKey("WeightClassId", "LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_weight_class_description", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("zone_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<int>("CountryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("ZoneId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_zone", (string)null);
                });

            modelBuilder.Entity("xmlParserASP.Entities.Gamma.NgZoneToGeoZone", b =>
                {
                    b.Property<int>("ZoneToGeoZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("zone_to_geo_zone_id");

                    b.Property<int>("CountryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.Property<int>("GeoZoneId")
                        .HasColumnType("int(11)")
                        .HasColumnName("geo_zone_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int(11)")
                        .HasColumnName("zone_id");

                    b.HasKey("ZoneToGeoZoneId")
                        .HasName("PRIMARY");

                    b.ToTable("ng_zone_to_geo_zone", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
